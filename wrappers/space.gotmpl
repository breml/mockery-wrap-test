// Code generated by mockery. DO NOT EDIT.
// template: wrappers/space.gotmpl

package {{ .PkgName }}

import (
{{ range .Imports -}}
	{{ .Alias }} "{{ .Path }}"
{{ end -}}
)


{{ range $i, $mock := .Mocks }}

	{{ $decorator := (or .TemplateData.DecoratorName (printf "%sWithSpace" $mock.InterfaceName)) }}

	// {{$decorator}} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} that is instrumented with space.
	type {{$decorator}} struct {
		_base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}
		space string
	}

	// New{{$decorator}} instruments an implementation of the {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} with space.
	func New{{$decorator}}(base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}, space string) {{$decorator}} {
		return {{$decorator}}{
			_base: base,
			space: space,
		}
	}

	{{ range $method := $mock.Methods }}

		// {{$method.Name}} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}.
		func (_d {{$decorator}}) {{ $method.Declaration }} {

			defer func() {
				fmt.Println(_d.space)
			}()

			{{ if gt ($method.Returns | len) 0 -}}
			return
			{{- end }} _d._base.{{ $method.Call }}
		}

	{{ end }}

{{ end }}
