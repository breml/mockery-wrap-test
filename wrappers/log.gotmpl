// Based on https://github.com/hexdigest/gowrap/blob/master/templates/log

// Code generated by mockery. DO NOT EDIT.
// template: wrappers/log.gotmpl

package {{ .PkgName }}

import (
{{ range .Imports -}}
	{{ .Alias }} "{{ .Path }}"
{{ end -}}
)

{{ range $i, $mock := .Mocks }}

  {{ $decorator := (or .TemplateData.DecoratorName (printf "%sWithLog" $mock.InterfaceName)) }}

  // {{$decorator}} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} that is instrumented with logging
  type {{$decorator}} struct {
    _stdlog, _errlog *log.Logger
    _base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}
  }

  // New{{$decorator}} instruments an implementation of the {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} with simple logging
  func New{{$decorator}}(base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}, stdout, stderr io.Writer) {{$decorator}} {
    return {{$decorator}}{
      _base: base,
      _stdlog: log.New(stdout, "", log.LstdFlags),
      _errlog: log.New(stderr, "", log.LstdFlags),
    }
  }

  {{ range $method := $mock.Methods }}
    // {{$method.Name}} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}.
    func (_d {{$decorator}}) {{$method.Declaration}} {
        {{- if $method.HasParams}}
          _params := []interface{}{"{{$decorator}}: calling {{$method.Name}} with params:", {{$method.ArgCallListNoEllipsis}} }
          _d._stdlog.Println(_params...)
        {{else}}
          _d._stdlog.Println("{{$decorator}}: calling {{$method.Name}}")
        {{end -}}
        defer func() {
          {{- if $method.HasReturns}}
            _results := []interface{}{"{{$decorator}}: {{$method.Name}} returned results:", {{$method.ReturnArgNameList}} }
            {{- if $method.ReturnsError}}
              if err != nil {
                _d._errlog.Println(_results...)
              } else {
                _d._stdlog.Println(_results...)
              }
            {{else}}
              _d._stdlog.Println(_results...)
            {{end -}}
          {{else}}
            _d._stdlog.Println("{{$decorator}}: {{$method.Name}} finished")
          {{end -}}
        }()
        {{ if gt ($method.Returns | len) 0 -}}
        return
        {{- end }} _d._base.{{ $method.Call }}
    }
  {{end}}

{{end}}
