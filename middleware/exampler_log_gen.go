// Based on https://github.com/hexdigest/gowrap/blob/master/templates/log

// Code generated by mockery. DO NOT EDIT.
// template: wrappers/log.gotmpl

package middleware

import (
	"context"
	"io"
	"log"

	"github.com/breml/mockery-wrap-test/pkg"
)

// ExamplerWithLog implements pkg.Exampler that is instrumented with logging
type ExamplerWithLog struct {
	_stdlog, _errlog *log.Logger
	_base            pkg.Exampler
}

// NewExamplerWithLog instruments an implementation of the pkg.Exampler with simple logging
func NewExamplerWithLog(base pkg.Exampler, stdout, stderr io.Writer) ExamplerWithLog {
	return ExamplerWithLog{
		_base:   base,
		_stdlog: log.New(stdout, "", log.LstdFlags),
		_errlog: log.New(stderr, "", log.LstdFlags),
	}
}

// Example implements pkg.Exampler.
func (_d ExamplerWithLog) Example() {
	_d._stdlog.Println("ExamplerWithLog: calling Example")
	defer func() {
		_d._stdlog.Println("ExamplerWithLog: Example finished")
	}()
	_d._base.Example()
}

// ExampleWithArgs implements pkg.Exampler.
func (_d ExamplerWithLog) ExampleWithArgs(arg0 int, arg1 string) {
	_params := []interface{}{"ExamplerWithLog: calling ExampleWithArgs with params:", arg0, arg1}
	_d._stdlog.Println(_params...)
	defer func() {
		_d._stdlog.Println("ExamplerWithLog: ExampleWithArgs finished")
	}()
	_d._base.ExampleWithArgs(arg0, arg1)
}

// ExampleWithArgsAndVariadicArgs implements pkg.Exampler.
func (_d ExamplerWithLog) ExampleWithArgsAndVariadicArgs(arg0 int, args ...string) {
	_params := []interface{}{"ExamplerWithLog: calling ExampleWithArgsAndVariadicArgs with params:", arg0, args}
	_d._stdlog.Println(_params...)
	defer func() {
		_d._stdlog.Println("ExamplerWithLog: ExampleWithArgsAndVariadicArgs finished")
	}()
	_d._base.ExampleWithArgsAndVariadicArgs(arg0, args...)
}

// ExampleWithContext implements pkg.Exampler.
func (_d ExamplerWithLog) ExampleWithContext(ctx context.Context) {
	_params := []interface{}{"ExamplerWithLog: calling ExampleWithContext with params:", ctx}
	_d._stdlog.Println(_params...)
	defer func() {
		_d._stdlog.Println("ExamplerWithLog: ExampleWithContext finished")
	}()
	_d._base.ExampleWithContext(ctx)
}

// ExampleWithContextAndArgs implements pkg.Exampler.
func (_d ExamplerWithLog) ExampleWithContextAndArgs(ctx context.Context, arg0 int, arg1 string) {
	_params := []interface{}{"ExamplerWithLog: calling ExampleWithContextAndArgs with params:", ctx, arg0, arg1}
	_d._stdlog.Println(_params...)
	defer func() {
		_d._stdlog.Println("ExamplerWithLog: ExampleWithContextAndArgs finished")
	}()
	_d._base.ExampleWithContextAndArgs(ctx, arg0, arg1)
}

// ExampleWithContextArgsAndVariadicArgs implements pkg.Exampler.
func (_d ExamplerWithLog) ExampleWithContextArgsAndVariadicArgs(ctx context.Context, arg0 int, args ...string) {
	_params := []interface{}{"ExamplerWithLog: calling ExampleWithContextArgsAndVariadicArgs with params:", ctx, arg0, args}
	_d._stdlog.Println(_params...)
	defer func() {
		_d._stdlog.Println("ExamplerWithLog: ExampleWithContextArgsAndVariadicArgs finished")
	}()
	_d._base.ExampleWithContextArgsAndVariadicArgs(ctx, arg0, args...)
}

// ExampleWithErrorReturn implements pkg.Exampler.
func (_d ExamplerWithLog) ExampleWithErrorReturn() (err error) {
	_d._stdlog.Println("ExamplerWithLog: calling ExampleWithErrorReturn")
	defer func() {
		_results := []interface{}{"ExamplerWithLog: ExampleWithErrorReturn returned results:", err}
		if err != nil {
			_d._errlog.Println(_results...)
		} else {
			_d._stdlog.Println(_results...)
		}
	}()
	return _d._base.ExampleWithErrorReturn()
}

// ExampleWithReturn implements pkg.Exampler.
func (_d ExamplerWithLog) ExampleWithReturn() (s string) {
	_d._stdlog.Println("ExamplerWithLog: calling ExampleWithReturn")
	defer func() {
		_results := []interface{}{"ExamplerWithLog: ExampleWithReturn returned results:", s}
		_d._stdlog.Println(_results...)
	}()
	return _d._base.ExampleWithReturn()
}

// ExampleWithReturnAndError implements pkg.Exampler.
func (_d ExamplerWithLog) ExampleWithReturnAndError() (s string, err error) {
	_d._stdlog.Println("ExamplerWithLog: calling ExampleWithReturnAndError")
	defer func() {
		_results := []interface{}{"ExamplerWithLog: ExampleWithReturnAndError returned results:", s, err}
		if err != nil {
			_d._errlog.Println(_results...)
		} else {
			_d._stdlog.Println(_results...)
		}
	}()
	return _d._base.ExampleWithReturnAndError()
}

// ExampleWithVariadicArgs implements pkg.Exampler.
func (_d ExamplerWithLog) ExampleWithVariadicArgs(args ...string) {
	_params := []interface{}{"ExamplerWithLog: calling ExampleWithVariadicArgs with params:", args}
	_d._stdlog.Println(_params...)
	defer func() {
		_d._stdlog.Println("ExamplerWithLog: ExampleWithVariadicArgs finished")
	}()
	_d._base.ExampleWithVariadicArgs(args...)
}

// FullExample implements pkg.Exampler.
func (_d ExamplerWithLog) FullExample(ctx context.Context, arg0 int, arg1 string, args ...string) (s string, err error) {
	_params := []interface{}{"ExamplerWithLog: calling FullExample with params:", ctx, arg0, arg1, args}
	_d._stdlog.Println(_params...)
	defer func() {
		_results := []interface{}{"ExamplerWithLog: FullExample returned results:", s, err}
		if err != nil {
			_d._errlog.Println(_results...)
		} else {
			_d._stdlog.Println(_results...)
		}
	}()
	return _d._base.FullExample(ctx, arg0, arg1, args...)
}
